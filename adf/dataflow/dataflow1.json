{
	"name": "dataflow1",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DataLakeSalesData",
						"type": "DatasetReference"
					},
					"name": "DataLake"
				},
				{
					"dataset": {
						"referenceName": "CustomerLKP",
						"type": "DatasetReference"
					},
					"name": "LookUpCustomer"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SalesDataSink",
						"type": "DatasetReference"
					},
					"name": "SalesDataTargetFile"
				},
				{
					"dataset": {
						"referenceName": "SalesDataTarget2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "SalesDataTargetDefault",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "ConditionalSplit1"
				},
				{
					"name": "LookUpCust"
				}
			],
			"script": "source(output(\n\t\tInvoiceNo as integer,\n\t\tStockCode as string,\n\t\tDescription as string,\n\t\tQuantity as integer,\n\t\tInvoiceDate as date,\n\t\tUnitPrice as float,\n\t\tCustomerID as integer,\n\t\tCountry as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> DataLake\nsource(output(\n\t\tCID as integer,\n\t\tName as string\n\t),\n\tallowSchemaDrift: false,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false,\n\tpartitionBy('hash', 1)) ~> LookUpCustomer\nLookUpCust split(UnitPrice>1 && UnitPrice<4\r\n,\n\tUnitPrice>3 && UnitPrice<4\r\n,\n\tdisjoint: true,\n\tpartitionBy('hash', 1)) ~> ConditionalSplit1@(Stream1, Stream2, DefaultStream)\nDataLake, LookUpCustomer lookup(CustomerID == CID,\n\tmultiple: false,\n\tpickup: 'any',\n\tpartitionBy('hash', 1),\n\tbroadcast: 'auto')~> LookUpCust\nConditionalSplit1@Stream1 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SalesData_Target.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> SalesDataTargetFile\nConditionalSplit1@Stream2 sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SalesDataTarget2.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink1\nConditionalSplit1@DefaultStream sink(allowSchemaDrift: true,\n\tvalidateSchema: false,\n\tpartitionFileNames:['SalesDataTargetDefault.csv'],\n\tpartitionBy('hash', 1),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true) ~> sink2"
		}
	}
}